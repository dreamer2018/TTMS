#include "Play_Persist.h"
#include "../Service/Play.h"
#include "../Common/List.h"
#include <stdlib.h>
#include <stdio.h>
#include <assert.h>
#include <unistd.h>
#include <string.h>

static const char PLAY_DATA_FILE[] = "Play.dat";
static const char PLAY_DATA_TEMP_FILE[] = "PlayTmp.dat";

int Play_Perst_Insert(const play_t *data) 
{
	int rtn=0;
	FILE *fp;
	fp=fopen(PLAY_DATA_FILE,"ab");
	if(NULL==fp) {
		printf("cannot open file %s!\n",PLAY_DATA_FILE);
		return 0;
	}
	else
	{
		rtn=fwrite(data,sizeof(play_t),1,fp);
	}
	fclose(fp);
       return rtn;
}

int Play_Perst_Update(const play_t *data) {
	assert (NULL!=data);
	FILE *fp = fopen(PLAY_DATA_FILE,"rb+");
	if(NULL==fp) {
		printf("cannot open the file %s !\n",PLAY_DATA_FILE);
		return 0;
	}
	play_t buf;
	int found = 0;
	while(!feof(fp)) {
		if(fread(&buf,sizeof(play_t),1,fp)) {
			if(buf.id==data->id) {
				fseek(fp,-sizeof(play_t),SEEK_CUR);
				fwrite(data,sizeof(play_t),1,fp);
				found = 1;
				break;
			}
		}
	}
	fclose(fp);
       return found;
}

int Play_Perst_DeleteByID(int ID) 
{
	rename(PLAY_DATA_TEMP_FILE,PLAY_DATA_FILE);
	FILE *fp = fopen(PLAY_DATA_FILE,"rb");
	FILE *fp1 = fopen(PLAY_DATA_TEMP_FILE,"ab");
	if(fp==NULL||NULL==fp1) {
		printf("Cannot open the file!\n");
		return 0;
	}
	play_t data;int found=0;
	while(!feof(fp)) {
		if (fread(&data,sizeof(play_t),1,fp)) {
			if(data.id==ID) found =1;
			else fwrite(&data,sizeof(play_t),1,fp1);
		}
	}
	fclose(fp);fclose(fp1);
	remove(PLAY_DATA_FILE);rename(PLAY_DATA_TEMP_FILE,PLAY_DATA_FILE);
	return found;
}

int Play_Perst_SelectByID(int ID, play_t *buf) {
	FILE *fp = fopen(PLAY_DATA_FILE,"rb");
	if(NULL==fp) {
		return 0;
	}
	play_t data;
	int found = 0;
	
	while(!feof(fp)) {
		if (fread(&data,sizeof(play_t),1,fp)) {
			if(ID == data.id) {
				*buf = data;
				found = 1;
				break;
			}
		}
	}
	fclose(fp);
	
       return found;
}

int Play_Perst_SelectAll(play_list_t list) {
	play_node_t *newNode;
	play_t data;
	int reccount=0;

	assert(NULL!=list);
	
 	List_Free(list, play_node_t);

	FILE *fp=fopen(PLAY_DATA_FILE,"rb");
	if(NULL == fp) {
		//printf("The file cannot found!\n");
		return 0;
	}
	while (!feof(fp)) {
		if(fread(&data, sizeof(play_t),1,fp)) {
			newNode = (play_node_t*) malloc(sizeof(play_node_t));
			if(!newNode) { 
				printf(
						"Warning, Memory OverFlow!!!\n Cannot Load more Data into memory!!!\n");
				break;
			}
			newNode->data = data;
			List_AddTail(list,newNode);
			reccount++;
		}
	}
	fclose(fp);	
       return reccount;
}

int Play_Perst_SelectByName(play_list_t list,char condt[]) {
	FILE *fp = fopen(PLAY_DATA_FILE,"rb");
        if(NULL==fp) {
                return 0;
        }
        play_t data;
	play_node_t *NewNode;
        int found = 0;
	List_Free(list, play_node_t);
        while(!feof(fp)) {
                if (fread(&data,sizeof(play_t),1,fp)) {
                        if(!strcmp(data.name,condt)) {
				NewNode = (play_node_t*) malloc(sizeof(play_node_t));
				if(!NewNode) { 
					printf("Warning, Memory OverFlow!!!\n Cannot Load more Data into memory!!!\n");
				break;
				}
                     	          NewNode->data = data;
				List_AddTail(list,NewNode);
                                found++;
                        }
                }
        }
        fclose(fp);
       return found;
}
